generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  cart          Cart?
  wishlist      Wishlist?
  addresses     Address[]
  reviews       Review[]
  notifications Notification[]
  profile       Profile?
  seller        Seller?
}

model Seller {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  bio       String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  price         Float
  imageUrl      String
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id])
  sellerId      Int
  seller        Seller         @relation(fields: [sellerId], references: [id])
  status        ProductStatus  @default(AVAILABLE)
  featured      Boolean        @default(false)
  reviews       Review[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  stock         Stock?
  images        ProductImage[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Stock {
  id                Int     @id @default(autoincrement())
  productId         Int     @unique
  product           Product @relation(fields: [productId], references: [id])
  sku               String
  quantity          Int
  lowStockThreshold Int
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  url       String
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id             Int            @id @default(autoincrement())
  userId         Int
  user           User           @relation(fields: [userId], references: [id])
  items          OrderItem[]
  totalAmount    Float
  status         OrderStatus
  paymentStatus  PaymentStatus
  shippingStatus ShippingStatus
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  payments       Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Wishlist {
  id     Int            @id @default(autoincrement())
  userId Int            @unique
  user   User           @relation(fields: [userId], references: [id])
  items  WishlistItem[]
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlistId Int
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id])
  paymentMethod String
  paymentStatus String
  paymentDate   DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ShippingStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}
